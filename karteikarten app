<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Karteikarten App</title>
    
    <!-- PWA / Add to Home Screen -->
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Karteikarten">
    <meta name="theme-color" content="#0f172a">
    <link rel="apple-touch-icon" href="icon-192x192.png">
    <link rel="manifest" href="manifest.json">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles für ein besseres App-Gefühl */
        html, body {
            overscroll-behavior-y: contain;
            font-family: 'Inter', sans-serif;
        }
        
        /* 3D Flip-Animation für die Karte */
        .card {
            perspective: 1000px;
        }
        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        .is-flipped .card-inner {
            transform: rotateY(180deg);
        }
        .card-face {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden; /* Safari */
            backface-visibility: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            text-align: center;
        }
        .card-back {
            transform: rotateY(180deg);
        }

        /* Verhindert das versehentliche Markieren von Text beim schnellen Tippen */
        .no-select {
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none;   /* Safari, Chrome, Opera, Edge */
            -moz-user-select: none;      /* Firefox */
            -ms-user-select: none;       /* Internet Explorer/Edge */
            user-select: none;           /* Non-prefixed version, currently supported by Chrome, Opera and Firefox */
        }
        
        #settings-menu {
            transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
        }
    </style>
</head>
<body class="bg-slate-900 text-slate-100 flex items-center justify-center min-h-screen no-select overflow-hidden">

    <div class="w-full max-w-md mx-auto p-4 flex flex-col h-screen">
        
        <!-- Header -->
        <header class="flex justify-between items-center mb-4 pt-4 relative">
            <h1 class="text-xl font-bold text-indigo-400">Karteikarten</h1>
            <div class="relative">
                <button id="settings-btn" class="p-2 rounded-full hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"/><circle cx="12" cy="5" r="1"/><circle cx="12" cy="19" r="1"/></svg>
                </button>
                <div id="settings-menu" class="absolute right-0 mt-2 w-48 bg-slate-800 rounded-lg shadow-xl z-20 hidden origin-top-right transform scale-95 opacity-0">
                    <a href="#" id="menu-import-btn" class="flex items-center gap-3 px-4 py-3 text-sm text-slate-200 hover:bg-slate-700 rounded-t-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-70"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" x2="12" y1="3" y2="15"/></svg>
                        <span>Karten importieren</span>
                    </a>
                    <a href="#" id="menu-install-btn" class="flex items-center gap-3 px-4 py-3 text-sm text-slate-200 hover:bg-slate-700 rounded-b-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-70"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
                        <span>App installieren</span>
                    </a>
                </div>
            </div>
        </header>
        
        <!-- Karteikarten-Container -->
        <main class="flex-grow flex flex-col justify-center">
            <!-- Karte -->
            <div id="flashcard" class="card aspect-[3/4] sm:aspect-video w-full cursor-pointer rounded-2xl shadow-2xl bg-slate-800">
                <div class="card-inner rounded-2xl">
                    <div id="card-front" class="card-face rounded-2xl bg-slate-800">
                        <p class="text-2xl md:text-3xl font-medium"></p>
                    </div>
                    <div id="card-back" class="card-face rounded-2xl bg-slate-700">
                        <p class="text-xl md:text-2xl"></p>
                    </div>
                </div>
            </div>

            <!-- Fortschrittsanzeige -->
            <div id="progress" class="text-center text-slate-400 mt-4 text-lg">1 / 1</div>
        </main>
        
        <!-- Hint Button -->
        <div class="text-center my-2">
            <button id="hint-btn" class="bg-teal-600 hover:bg-teal-500 text-white font-semibold py-2 px-5 rounded-lg shadow-md transition-transform duration-200 active:scale-95 flex items-center justify-center mx-auto gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m18 13-1.37-1.37a2 2 0 0 0-2.83 0l-1.42 1.42a2 2 0 0 1-2.83 0L8.2 11.69a2 2 0 0 0-2.83 0L4 13"/><path d="m2 16 6 6"/><path d="M12 4v8"/><path d="M8.5 7.5a4 4 0 0 1 7 0"/><path d="m12 16 6-6"/></svg>
                <span>Hinweis ✨</span>
            </button>
        </div>

        <!-- Navigation -->
        <footer class="flex items-center justify-between gap-4 py-4">
            <button id="prev-btn" class="bg-slate-700 hover:bg-slate-600 text-white font-bold p-4 rounded-full w-20 h-20 flex items-center justify-center shadow-lg transition-transform duration-200 active:scale-90">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
            </button>
            <button id="next-btn" class="bg-indigo-600 hover:bg-indigo-500 text-white font-bold p-4 rounded-full w-20 h-20 flex items-center justify-center shadow-lg transition-transform duration-200 active:scale-90">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
            </button>
        </footer>
    </div>

    <!-- Modals -->
    <div id="modal-backdrop" class="fixed inset-0 bg-black bg-opacity-70 hidden z-40"></div>
    
    <!-- Importieren Modal -->
    <div id="import-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-slate-800 rounded-2xl shadow-xl w-full max-w-lg p-6">
            <h2 class="text-2xl font-bold mb-4 text-indigo-400">Daten importieren</h2>
            <div class="mb-6">
                <h3 class="text-lg font-semibold text-slate-300 mb-2">Karten generieren lassen ✨</h3>
                <p class="text-slate-400 mb-3">Gib ein Thema ein und lass die KI Karteikarten für dich erstellen.</p>
                <div class="flex gap-2">
                    <input type="text" id="topic-input" class="flex-grow bg-slate-900 text-slate-200 p-3 rounded-lg border-2 border-slate-700 focus:border-teal-500 focus:outline-none" placeholder="z.B. Sonnensystem, Römische Kaiser...">
                    <button id="generate-cards-btn" class="bg-teal-600 hover:bg-teal-500 text-white font-semibold py-2 px-4 rounded-lg transition-transform duration-200 active:scale-95">Generieren</button>
                </div>
            </div>
            <hr class="border-slate-700 my-6">
            <p class="text-slate-400 mb-4">Oder füge hier deine Daten manuell ein. Trenne Frage und Antwort mit <code class="bg-slate-900 text-amber-400 px-1 rounded">:::</code>.</p>
            <textarea id="import-textarea" class="w-full h-48 bg-slate-900 text-slate-200 p-3 rounded-lg border-2 border-slate-700 focus:border-indigo-500 focus:outline-none" placeholder="Frage 1 ::: Antwort 1&#10;Frage 2 ::: Antwort 2"></textarea>
            <div class="flex justify-end gap-4 mt-6">
                <button id="close-modal-btn" class="bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-5 rounded-lg transition-transform duration-200 active:scale-95">Abbrechen</button>
                <button id="save-data-btn" class="bg-indigo-600 hover:bg-indigo-500 text-white font-semibold py-2 px-5 rounded-lg transition-transform duration-200 active:scale-95">Speichern</button>
            </div>
        </div>
    </div>

    <!-- Hint Modal -->
    <div id="hint-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-slate-800 rounded-2xl shadow-xl w-full max-w-md p-6 text-center">
            <h2 class="text-2xl font-bold mb-4 text-teal-400">Hinweis ✨</h2>
            <p id="hint-text" class="text-slate-300 text-lg mb-6"></p>
            <button id="close-hint-btn" class="bg-indigo-600 hover:bg-indigo-500 text-white font-semibold py-2 px-8 rounded-lg transition-transform duration-200 active:scale-95">Verstanden</button>
        </div>
    </div>

    <!-- Install Instructions Modal -->
    <div id="install-instructions-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-slate-800 rounded-2xl shadow-xl w-full max-w-md p-6 text-center">
            <h2 class="text-2xl font-bold mb-4 text-indigo-400">App installieren</h2>
            <p id="install-instructions-text" class="text-slate-300 text-lg mb-6">Um diese App auf deinem Startbildschirm zu installieren, tippe auf das "Teilen"-Symbol in deinem Browser und wähle dann "Zum Home-Bildschirm".</p>
            <button id="close-install-btn" class="bg-indigo-600 hover:bg-indigo-500 text-white font-semibold py-2 px-8 rounded-lg transition-transform duration-200 active:scale-95">Verstanden</button>
        </div>
    </div>
    
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-70 flex-col flex items-center justify-center hidden z-[60]">
        <div class="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-indigo-400"></div>
        <p id="loading-text" class="text-white mt-4 text-lg">Wird geladen...</p>
    </div>

    <script>
        // --- Service Worker Registration ---
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('./sw.js')
                    .then(registration => console.log('ServiceWorker registration successful with scope: ', registration.scope))
                    .catch(error => console.log('ServiceWorker registration failed: ', error));
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            // DOM-Elemente
            const flashcard = document.getElementById('flashcard');
            const cardFront = document.getElementById('card-front').querySelector('p');
            const cardBack = document.getElementById('card-back').querySelector('p');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const progressText = document.getElementById('progress');
            
            // Menu elements
            const settingsBtn = document.getElementById('settings-btn');
            const settingsMenu = document.getElementById('settings-menu');
            const menuImportBtn = document.getElementById('menu-import-btn');
            const menuInstallBtn = document.getElementById('menu-install-btn');

            // Modal Elements
            const modalBackdrop = document.getElementById('modal-backdrop');
            const importModal = document.getElementById('import-modal');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const saveDataBtn = document.getElementById('save-data-btn');
            const importTextarea = document.getElementById('import-textarea');
            const hintModal = document.getElementById('hint-modal');
            const closeHintBtn = document.getElementById('close-hint-btn');
            const hintText = document.getElementById('hint-text');
            const installInstructionsModal = document.getElementById('install-instructions-modal');
            const closeInstallBtn = document.getElementById('close-install-btn');

            // Gemini Elements
            const topicInput = document.getElementById('topic-input');
            const generateCardsBtn = document.getElementById('generate-cards-btn');
            const hintBtn = document.getElementById('hint-btn');
            const loadingOverlay = document.getElementById('loading-overlay');
            const loadingText = document.getElementById('loading-text');

            // Gemini API Configuration
            const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;

            // App-Zustand
            let cards = [];
            let currentCardIndex = 0;
            let isFlipped = false;
            let deferredInstallPrompt = null;

            const sampleData = [
                { q: "Willkommen!", a: "Dies ist eine Beispiel-Karte. Öffne das Menü (•••), um deine eigenen Karten zu importieren." },
                { q: "Was ist neu?", a: "Du kannst jetzt Karten generieren lassen, Hinweise anfordern oder die App auf deinem Gerät installieren. Alles im Menü (•••)!" },
                { q: "Wie importiere ich?", a: "Kopiere deinen Text, z.B. aus NotebookLM, und füge ihn in das Import-Fenster ein." },
                { q: "Welches Format brauche ich?", a: "Schreibe die Frage, dann ':::', dann die Antwort. Jede neue Karte kommt in eine neue Zeile." },
            ];

            // PWA Install Prompt
             window.addEventListener('beforeinstallprompt', (e) => {
                e.preventDefault();
                deferredInstallPrompt = e;
                menuInstallBtn.style.display = 'flex'; // Use flex to match other menu items
            });
            
            // Hide by default unless the prompt is triggered
             menuInstallBtn.style.display = 'none'; 
            // Also hide if already running as a standalone app
            if(window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {
                 menuInstallBtn.style.display = 'none';
            }


            // Helper functions for loading state
            function showLoading(message = 'Wird geladen...') {
                loadingText.textContent = message;
                loadingOverlay.classList.remove('hidden');
            }

            function hideLoading() {
                loadingOverlay.classList.add('hidden');
            }
            
            // Function to call Gemini API with exponential backoff
            async function callGeminiAPI(prompt, retries = 3, delay = 1000) {
                try {
                    const payload = { contents: [{ parts: [{ text: prompt }] }] };
                    const response = await fetch(GEMINI_API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        if (response.status === 429 && retries > 0) {
                            await new Promise(res => setTimeout(res, delay));
                            return callGeminiAPI(prompt, retries - 1, delay * 2);
                        }
                        throw new Error(`API error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content?.parts?.[0]?.text) {
                        return result.candidates[0].content.parts[0].text;
                    } else {
                        console.error("Unexpected API response structure:", result);
                        throw new Error('Ungültige API-Antwort erhalten.');
                    }
                } catch (error) {
                    console.error('Error calling Gemini API:', error);
                    hideLoading();
                     const customAlert = document.createElement('div');
                    customAlert.style.position = 'fixed';
                    customAlert.style.top = '20px';
                    customAlert.style.left = '50%';
                    customAlert.style.transform = 'translateX(-50%)';
                    customAlert.style.padding = '1rem 2rem';
                    customAlert.style.backgroundColor = '#ef4444'; // red-500
                    customAlert.style.color = 'white';
                    customAlert.style.borderRadius = '0.5rem';
                    customAlert.style.boxShadow = '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)';
                    customAlert.style.zIndex = '100';
                    customAlert.textContent = `Ein Fehler ist aufgetreten: ${error.message}.`;
                    document.body.appendChild(customAlert);
                    setTimeout(() => {
                        customAlert.remove();
                    }, 4000);
                    return null;
                }
            }


            // Funktionen
            function loadCards() {
                const storedCards = localStorage.getItem('flashcards');
                if (storedCards) {
                    cards = JSON.parse(storedCards);
                } else {
                    cards = sampleData;
                }
                if (!cards || cards.length === 0) {
                    cards = sampleData;
                }
                currentCardIndex = 0;
                renderCard();
            }

            function saveCardsToStorage() {
                localStorage.setItem('flashcards', JSON.stringify(cards));
            }

            function renderCard() {
                if (cards.length === 0) {
                    cardFront.textContent = "Keine Karten gefunden.";
                    cardBack.textContent = "Bitte importiere neue Karten.";
                    progressText.textContent = "0 / 0";
                    return;
                }
                flashcard.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
                flashcard.style.transform = 'scale(0.95)';
                flashcard.style.opacity = '0';
                setTimeout(() => {
                    const card = cards[currentCardIndex];
                    cardFront.textContent = card.q;
                    cardBack.textContent = card.a;
                    progressText.textContent = `${currentCardIndex + 1} / ${cards.length}`;
                    if (isFlipped) {
                        flashcard.classList.remove('is-flipped');
                        isFlipped = false;
                    }
                    flashcard.style.transform = 'scale(1)';
                    flashcard.style.opacity = '1';
                }, 300);
            }
            
            async function generateCardsFromTopic() {
                const topic = topicInput.value.trim();
                if (!topic) return;
                showLoading('Generiere Karten...');
                const prompt = `Erstelle 5 bis 10 Karteikarten zum Thema "${topic}". Die Sprache muss Deutsch sein. Formatiere jede Karte als eine einzelne Zeile mit der Frage, gefolgt von ":::", gefolgt von der Antwort. Beispiel:\nHauptstadt von Deutschland? ::: Berlin\nWer schrieb Faust? ::: Johann Wolfgang von Goethe`;
                const generatedText = await callGeminiAPI(prompt);
                hideLoading();
                if (generatedText) {
                    importTextarea.value = generatedText.trim();
                }
            }

            async function getHint() {
                if (cards.length === 0) return;
                if (isFlipped) {
                    const customAlert = document.createElement('div');
                    customAlert.style.position = 'fixed';
                    customAlert.style.top = '20px';
                    customAlert.style.left = '50%';
                    customAlert.style.transform = 'translateX(-50%)';
                    customAlert.style.padding = '1rem 2rem';
                    customAlert.style.backgroundColor = '#f97316';
                    customAlert.style.color = 'white';
                    customAlert.style.borderRadius = '0.5rem';
                    customAlert.style.zIndex = '100';
                    customAlert.textContent = `Bitte drehe die Karte zuerst auf die Frageseite.`;
                    document.body.appendChild(customAlert);
                    setTimeout(() => {
                        customAlert.remove();
                    }, 3000);
                    return;
                }
                const currentCard = cards[currentCardIndex];
                showLoading('Suche einen Hinweis...');
                const prompt = `Gib einen kurzen Hinweis (maximal ein Satz) für die Antwort auf die folgende Frage. Gib NICHT die Antwort selbst. Die Frage ist: "${currentCard.q}". Die volle Antwort ist: "${currentCard.a}". Der Hinweis muss auf Deutsch sein.`;
                const hint = await callGeminiAPI(prompt);
                hideLoading();
                if (hint) {
                    hintText.textContent = hint;
                    showGenericModal(hintModal);
                }
            }

            function flipCard() {
                isFlipped = !isFlipped;
                flashcard.classList.toggle('is-flipped');
            }

            function nextCard() {
                if (cards.length === 0) return;
                currentCardIndex = (currentCardIndex + 1) % cards.length;
                renderCard();
            }

            function prevCard() {
                if (cards.length === 0) return;
                currentCardIndex = (currentCardIndex - 1 + cards.length) % cards.length;
                renderCard();
            }

            function showGenericModal(modal) {
                modalBackdrop.classList.remove('hidden');
                modal.classList.remove('hidden');
            }

            function hideAllModals() {
                modalBackdrop.classList.add('hidden');
                importModal.classList.add('hidden');
                hintModal.classList.add('hidden');
                installInstructionsModal.classList.add('hidden');
            }
            
            function saveData() {
                const text = importTextarea.value.trim();
                if (!text) {
                    hideAllModals();
                    return;
                }
                
                const newCards = text.split('\n')
                    .map(line => {
                        const parts = line.split(':::');
                        if (parts.length === 2 && parts[0].trim() && parts[1].trim()) {
                            return { q: parts[0].trim(), a: parts[1].trim() };
                        }
                        return null;
                    })
                    .filter(card => card !== null);
                
                if (newCards.length > 0) {
                    cards = newCards;
                    currentCardIndex = 0;
                    saveCardsToStorage();
                    renderCard();
                }
                
                hideAllModals();
            }
            
            function handleInstallClick() {
                toggleSettingsMenu(true); // close menu
                if (deferredInstallPrompt) {
                    deferredInstallPrompt.prompt();
                    deferredInstallPrompt.userChoice.then((choiceResult) => {
                        if (choiceResult.outcome === 'accepted') {
                            console.log('User accepted the A2HS prompt');
                        }
                        deferredInstallPrompt = null;
                         menuInstallBtn.style.display = 'none';
                    });
                } else {
                    // Fallback for browsers that don't support beforeinstallprompt (like iOS Safari)
                     showGenericModal(installInstructionsModal);
                }
            }

            function toggleSettingsMenu(forceClose = false) {
                if (forceClose || !settingsMenu.classList.contains('hidden')) {
                    settingsMenu.classList.add('opacity-0', 'scale-95');
                    setTimeout(() => settingsMenu.classList.add('hidden'), 200);
                } else {
                    settingsMenu.classList.remove('hidden');
                    // Use a timeout to allow the 'hidden' class to be removed before starting the transition
                    setTimeout(() => settingsMenu.classList.remove('opacity-0', 'scale-95'), 10);
                }
            }

            // --- Event Listeners ---
            flashcard.addEventListener('click', flipCard);
            nextBtn.addEventListener('click', nextCard);
            prevBtn.addEventListener('click', prevCard);
            
            settingsBtn.addEventListener('click', (e) => {
                e.stopPropagation(); // prevent window click listener from closing it immediately
                toggleSettingsMenu();
            });
            
            menuImportBtn.addEventListener('click', (e) => {
                e.preventDefault();
                toggleSettingsMenu(true);
                importTextarea.value = '';
                topicInput.value = '';
                showGenericModal(importModal);
            });

            menuInstallBtn.addEventListener('click', (e) => {
                e.preventDefault();
                handleInstallClick();
            });

            closeModalBtn.addEventListener('click', hideAllModals);
            saveDataBtn.addEventListener('click', saveData);
            generateCardsBtn.addEventListener('click', generateCardsFromTopic);
            closeHintBtn.addEventListener('click', hideAllModals);
            closeInstallBtn.addEventListener('click', hideAllModals);
            modalBackdrop.addEventListener('click', hideAllModals);

            // Close settings menu if clicked outside
            window.addEventListener('click', (e) => {
                if (!settingsMenu.classList.contains('hidden') && !settingsBtn.contains(e.target)) {
                    toggleSettingsMenu(true);
                }
            });


            // App starten
            loadCards();
        });
    </script>

</body>
</html>
